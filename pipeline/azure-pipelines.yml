# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4
trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  Solution: '**/*.sln'
  BuildPlatform: 'Any CPU'
  BuildConfiguration: 'Release'
  CommitIdForGitHub: $[coalesce(variables['System.PullRequest.SourceCommitId'], variables['Build.SourceVersion'])]
  APIPortToTest: 5001
  APIUrlToTest: 'http://localhost:$(APIPortToTest)/' # variable that overrides testappsettings.json in E2E tests
  DockerNamespace: harrisonslater
  DockerSQLImageRepository: harri-schooldemosql-database
  DockerSQLImageName: $(DockerSQLImageRepository):latest
  DockerImageRepository: harri-schooldemoapi
  DockerImageTag: $(Build.SourceBranchName)-$(Build.BuildNumber)
  DockerImageArtifactName: $(DockerImageRepository):$(DockerImageTag).tar.gz
  DockerImageName: $(DockerImageRepository):$(DockerImageTag)
  DockerImageNameLatest: $(DockerImageRepository):latest
  DockerVersion: '25.0.5'

stages:
- stage: 'Build'
  displayName: 'Build the API'
  jobs: 
    - job: 'Build'
      steps:
      - task: NuGetToolInstaller@1

      - task: DotNetCoreCLI@2
        displayName: 'dotnet restore'
        inputs:
          command: 'restore'
          projects: '$(Solution)'
          feedsToUse: 'select'
          workingDirectory: '$(Build.Repository.LocalPath)'
          
      - task: DotNetCoreCLI@2
        displayName: 'dotnet build - $(BuildConfiguration)'
        inputs:
          command: 'build'
          projects: '$(Solution)'
          arguments: '--no-restore --configuration $(BuildConfiguration) /p:Platform="$(BuildPlatform)" /p:SkipInvalidConfigurations=true"'

      - task: DotNetCoreCLI@2
        displayName: 'dotnet test - Unit'
        inputs:
          command: 'test'
          arguments: '--collect "Code Coverage" --settings:CodeCoverage.runsettings'
          projects: '**/Harri.SchoolDemoAPI.Tests.Unit.csproj'
          testRunTitle: 'Run Unit Tests'

      - task: DotNetCoreCLI@2
        displayName: 'dotnet test - Consumer Contract Tests'
        inputs:
          command: 'test'
          arguments: '--collect "Code Coverage" --settings:CodeCoverage.runsettings'
          projects: '**/Harri.SchoolDemoAPI.Tests.Contract.Consumer.csproj'
          testRunTitle: 'Run Contract Tests - Consumer'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish pact file'
        inputs:
          PathtoPublish: '$(System.DefaultWorkingDirectory)/src/Tests/Contract/pacts/SchoolDemoApi.Client-SchoolDemoApi.json'
          ArtifactName: 'pact'
          publishLocation: 'Container'
    
      - task: DotNetCoreCLI@2
        displayName: 'dotnet test - Provider Contract Tests'
        inputs:
          command: 'test'
          arguments: '--collect "Code Coverage" --settings:CodeCoverage.runsettings'
          projects: '**/Harri.SchoolDemoAPI.Tests.Contract.Provider.csproj'
          testRunTitle: 'Run Contract Tests - Provider'
      
      - task: DotNetCoreCLI@2
        displayName: 'dotnet publish - $(BuildConfiguration)'
        inputs:
          command: 'publish'
          publishWebProjects: true
          arguments: '--no-build --configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)/Build/$(BuildConfiguration)'
          
      - task: DotNetCoreCLI@2
        displayName: 'dotnet publish - Database Migrations - $(BuildConfiguration)'
        inputs:
          command: 'publish'
          publishWebProjects: false
          projects: '**/Harri.SchoolDemoAPI.DatabaseMigrations.csproj'
          arguments: '--no-build --configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)/DatabaseMigrations/$(BuildConfiguration)'

      - publish: '$(Build.ArtifactStagingDirectory)/Build'
        artifact: build

      - publish: '$(Build.ArtifactStagingDirectory)/DatabaseMigrations'
        artifact: databaseMigrations

      - task: DotNetCoreCLI@2
        inputs:
          command: 'pack'
          packagesToPack: '**/Harri.SchoolDemoAPI.Client.csproj'
          packDirectory: '$(Build.ArtifactStagingDirectory)/Nuget'
          nobuild: true
          includesymbols: true
          includesource: true
          versioningScheme: 'off'
      - task: DotNetCoreCLI@2
        inputs:
          command: 'pack'
          packagesToPack: '**/Harri.SchoolDemoAPI.HealthCheckClient.csproj'
          packDirectory: '$(Build.ArtifactStagingDirectory)/Nuget'
          nobuild: true
          includesymbols: true
          includesource: true
          versioningScheme: 'off'
      - task: DotNetCoreCLI@2
        inputs:
          command: 'pack'
          packagesToPack: '**/Harri.SchoolDemoAPI.Models.csproj'
          packDirectory: '$(Build.ArtifactStagingDirectory)/Nuget'
          nobuild: true
          includesymbols: true
          includesource: true
          versioningScheme: 'off'

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/Nuget'
          ArtifactName: 'nuget'
          publishLocation: 'Container'
          
      - task: DockerInstaller@0
        inputs:
          dockerVersion: $(DockerVersion)

      - task: Docker@2
        inputs:
          command: 'build'
          repository: '$(DockerNamespace)/$(DockerImageRepository)'
          Dockerfile: '**/Dockerfile'
          buildContext: '$(System.DefaultWorkingDirectory)'
          tags: |
            $(DockerImageTag)
            latest

      - script: 'mkdir $(Build.ArtifactStagingDirectory)/Docker'
      - script: 'docker save $(DockerNamespace)/$(DockerImageName) $(DockerNamespace)/$(DockerImageNameLatest) | gzip > $(Build.ArtifactStagingDirectory)/Docker/$(DockerImageArtifactName)'

      - script: 'ls $(Build.ArtifactStagingDirectory)/Docker'

      - publish: '$(Build.ArtifactStagingDirectory)/Docker'
        artifact: dockerBuild

- stage: 'BuildSQLDatabase'
  displayName: 'Build SQL Database'
  dependsOn: Build
#  condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
  jobs: 
    - job: 'BuildSQLDatabaseJob'
      displayName: 'Deploy (in-agent) and run E2E tests'
      steps:
      - checkout: self
        sparseCheckoutDirectories: pipeline
      - task: DownloadBuildArtifacts@1
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'databaseMigrations'
          downloadPath: '$(System.DefaultWorkingDirectory)'
          cleanDestinationFolder: false

      - task: ExtractFiles@1
        inputs:
          archiveFilePatterns: '**/Harri.SchoolDemoAPI.DatabaseMigrations.zip'
          destinationFolder: '$(System.DefaultWorkingDirectory)/DatabaseMigrationsExtract'
          cleanDestinationFolder: false
          overwriteExistingFiles: false

      - task: Docker@2
        inputs:
          command: 'build'
          repository: '$(DockerNamespace)/$(DockerSQLImageRepository)'
          Dockerfile: './pipeline/docker/SQL-Database-Dockerfile'
          buildContext: '$(System.DefaultWorkingDirectory)'
          tags: latest

#      - script: 'docker image ls'
      
      - script: 'docker run -e "MSSQL_SA_PASSWORD=p@ssw0rd" -p 1433:1433 --name schooldemosql-base -d $(DockerNamespace)/$(DockerSQLImageName)'
        displayName: docker run - School Demo SQL DB Container

      - task: Bash@3
        inputs:
          filePath: './pipeline/scripts/wait-for-healthy-container.sh'
          arguments: 'schooldemosql-base 45'
      
      - script: | 
          cd $(System.DefaultWorkingDirectory)/DatabaseMigrationsExtract/
          ls .
          dotnet ./Harri.SchoolDemoAPI.DatabaseMigrations.dll
        displayName: Run DatabaseMigrations
        
      # this commit saves the above database migration changes into a new image
      - script: 'docker commit schooldemosql-base $(DockerNamespace)/$(DockerSQLImageName)'
      
      - task: Docker@2
        inputs:
          containerRegistry: 'Docker Hub'
          repository: '$(DockerNamespace)/$(DockerSQLImageName)'
          command: 'push'
          tags: latest

#      - script: 'docker container inspect schooldemosql-base'

- stage: 'DeployAndTest'
  displayName: 'Deploy and Test'
  dependsOn: BuildSQLDatabase
  jobs: 
    - job: 'DeployAndTestJob'
      displayName: 'Deploy (in-agent) and run E2E tests'
      steps:

      - task: DownloadBuildArtifacts@1
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'build'
          downloadPath: '$(System.DefaultWorkingDirectory)'
          cleanDestinationFolder: false

      - task: DownloadBuildArtifacts@1
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'databaseMigrations'
          downloadPath: '$(System.DefaultWorkingDirectory)'
          cleanDestinationFolder: false
          

      - script: 'ls Release/'


#      - script: 'ls $(System.DefaultWorkingDirectory)'
#      - script: 'ls $(Build.Repository.LocalPath)/src/Tests/Harri.SchoolDemoAPI.Tests.E2E'

      - task: ExtractFiles@1
        inputs:
          archiveFilePatterns: '**/Harri.SchoolDemoAPI.zip'
          destinationFolder: '$(System.DefaultWorkingDirectory)/Extract'
          cleanDestinationFolder: false
          overwriteExistingFiles: false
              
      - task: ExtractFiles@1
        inputs:
          archiveFilePatterns: '**/Harri.SchoolDemoAPI.DatabaseMigrations.zip'
          destinationFolder: '$(System.DefaultWorkingDirectory)/DatabaseMigrationsExtract'
          cleanDestinationFolder: false
          overwriteExistingFiles: false

      - task: DockerInstaller@0
        inputs:
          dockerVersion: $(DockerVersion)

      - script: 'docker pull $(DockerNamespace)/$(DockerSQLImageName)'
        displayName: docker pull

      - script: 'docker run -e "ACCEPT_EULA=Y" -e "MSSQL_SA_PASSWORD=p@ssw0rd" -p 1433:1433 -d $(DockerNamespace)/$(DockerSQLImageName)'
        displayName: docker run - School Demo SQL DB Container
      
      - script: | 
          cd $(System.DefaultWorkingDirectory)/Extract/
          nohup dotnet ./Harri.SchoolDemoAPI.dll --urls=$(APIUrlToTest) &
          echo "##vso[task.setvariable variable=dotnetProcessId;]"$!
          cd $(System.DefaultWorkingDirectory)
        displayName: Run SchoolDemoAPI $(BuildConfiguration) build
          
      - script: curl -X GET -S -L $(APIUrlToTest)health --max-time 15 --fail
#      - script: 'curl -X GET -S -L $(APIUrlToTest)students/123'
#      - script: curl -X GET -S -L $(APIUrlToTest)health --max-time 15 --fail

#      - script: | 
#          cd $(System.DefaultWorkingDirectory)/DatabaseMigrationsExtract/
#          ls .

#      - script: | 
#          cd $(System.DefaultWorkingDirectory)/DatabaseMigrationsRelease/
#          ls .
#          cat 'ls ./Release'
#          ls ./Release

#      - script: 'ls .'

      - script: | 
          cd $(System.DefaultWorkingDirectory)/DatabaseMigrationsExtract/
          ls .
          dotnet ./Harri.SchoolDemoAPI.DatabaseMigrations.dll
        displayName: Run DatabaseMigrations

      - task: DotNetCoreCLI@2
        displayName: dotnet test - Integration
        inputs:
          command: 'test'
          arguments: '--collect "Code Coverage" --settings:CodeCoverage.runsettings'
          projects: '**/Harri.SchoolDemoAPI.Tests.Integration.csproj'
          testRunTitle: 'Integration Tests'

      - task: FileTransform@1
        displayName: testappsettings.json transform
        inputs:
          folderPath: '$(Build.Repository.LocalPath)/src/Tests/Harri.SchoolDemoAPI.Tests.E2E'
          fileType: 'json'
          targetFiles: 'testappsettings.json'
      
      - task: DotNetCoreCLI@2
        displayName: dotnet test - E2E
        inputs:
          command: 'test'
          projects: '**/Harri.SchoolDemoAPI.Tests.E2E.csproj'
          testRunTitle: 'E2E Tests'

      - script: 'kill $(dotnetProcessId)'

- stage: 'DeployAndTestDocker'
  displayName: 'Deploy and Test Docker'
  dependsOn: BuildSQLDatabase
  jobs: 
    - job: 'DeployAndTestDockerJob'
      displayName: 'Deploy Docker container (in-agent) and run E2E tests'
      steps:

      - task: DownloadBuildArtifacts@1
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'dockerBuild'
          downloadPath: '$(System.DefaultWorkingDirectory)'
          cleanDestinationFolder: false

#      - script: 'ls $(System.DefaultWorkingDirectory)'
#      - script: 'ls $(Build.Repository.LocalPath)/src/Tests/Harri.SchoolDemoAPI.Tests.E2E'

      - task: DockerInstaller@0
        inputs:
          dockerVersion: $(DockerVersion)

      - script: 'ls'
      - script: 'docker load < $(DockerImageArtifactName)'

      - script: 'docker pull $(DockerNamespace)/$(DockerSQLImageName)'
        displayName: docker pull SQL DB Image

      - script: 'docker run -e "ACCEPT_EULA=Y" -e "MSSQL_SA_PASSWORD=p@ssw0rd" -p 1433:1433 -d $(DockerNamespace)/$(DockerSQLImageName)'
        displayName: docker run - School Demo SQL DB Container
      
      - script: 'docker run -d -p $(APIPortToTest):8080 --add-host=host.docker.internal:host-gateway harrisonslater/$(DockerImageName)'
        displayName: docker run - School Demo API Container

#      - script: 'docker stats --no-stream'
#      - script: 'docker network ls'
#      - script: 'docker network inspect bridge'
#      - script: 'sleep 5'
#      - script: 'curl -X GET -S -L $(APIUrlToTest)openapi'
#      - script: 'curl -X GET -S $(APIUrlToTest)students/123'

      - task: FileTransform@1
        displayName: testappsettings.json transform
        inputs:
          folderPath: '$(Build.Repository.LocalPath)/src/Tests/Harri.SchoolDemoAPI.Tests.E2E'
          fileType: 'json'
          targetFiles: 'testappsettings.json'

      - script: sleep 10 #ensure School Demo API container is running
      - script: curl -X GET -S -L $(APIUrlToTest)health --max-time 15 --fail
      
      - task: DotNetCoreCLI@2
        displayName: dotnet test - E2E
        inputs:
          command: 'test'
          projects: '**/Harri.SchoolDemoAPI.Tests.E2E.csproj'
          testRunTitle: 'E2E Tests - Docker'

- stage: 'Publish'
  displayName: 'Publish main'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
  dependsOn: DeployAndTestDocker
  jobs: 
    - job: 'PublishDocker'
      displayName: 'Publish Docker container to DockerHub'

      steps:
      - checkout: none
      - task: DownloadBuildArtifacts@1
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'dockerBuild'
          downloadPath: '$(System.DefaultWorkingDirectory)'
          cleanDestinationFolder: false

      - script: 'docker load < $(DockerImageArtifactName)'
      
      - task: Docker@2
        inputs:
          containerRegistry: 'Docker Hub'
          repository: '$(DockerNamespace)/$(DockerImageRepository)'
          command: 'push'
          tags: |
            $(DockerImageTag)
            latest

- stage: 'PublishNuget'
  displayName: 'Publish nuget'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
  dependsOn: DeployAndTest
  jobs: 
    - job: 'PublishNuget'
      displayName: 'Publish nuget package to Nuget.org'

      steps:
      - checkout: none
      - task: NuGetToolInstaller@1
      - task: DownloadBuildArtifacts@1
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'nuget'
          downloadPath: '$(System.DefaultWorkingDirectory)'
          cleanDestinationFolder: true

      - task: NuGetCommand@2
        inputs:
          command: 'push'
          packagesToPush: '$(System.DefaultWorkingDirectory)/**/*.nupkg;!$(System.DefaultWorkingDirectory)/**/*.symbols.nupkg'
          nuGetFeedType: 'external'
          publishFeedCredentials: 'Nuget.org harri.dev Connection'

- stage: 'PostGithubCommitStatus'
  displayName: 'Github Commit Status'
  dependsOn:
  - 'DeployAndTest'
  - 'DeployAndTestDocker'
  condition: always()
  jobs:
    - job: 'GithubPostSuccessCommitStatus'
      displayName: 'Successful - Update Github Commit Status'
      condition: and(eq(stageDependencies.DeployAndTest.DeployAndTestJob.result, 'Succeeded'), eq(stageDependencies.DeployAndTestDocker.DeployAndTestDockerJob.result, 'Succeeded'))
      steps:
      - checkout: none
      - template: tasks/rest-github-commit-check.yml
        parameters:
          state: 'success'
          description: 'The build succeeded'
    - job: 'GithubPostFailureCommitStatus'
      displayName: 'Failure - Update Github Commit Status'
      condition: or(in(stageDependencies.DeployAndTest.DeployAndTestJob.result, 'Failed', 'Skipped'), in(stageDependencies.DeployAndTestDocker.DeployAndTestDockerJob.result, 'Failed', 'Skipped'))
      steps:
      - checkout: none
      - template: tasks/rest-github-commit-check.yml
        parameters:
          state: 'failure'
          description: 'The build failed'