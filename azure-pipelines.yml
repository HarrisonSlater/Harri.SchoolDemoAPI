# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4
trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  commitIdForGitHub: $[coalesce(variables['System.PullRequest.SourceCommitId'], variables['Build.SourceVersion'])]
  APIUrlToTest: 'http://localhost:5001/'

stages:
- stage: 'Build'
  displayName: 'Build the School Demo REST API'
  jobs: 
    - job: 'Build'
      steps:
      - task: NuGetToolInstaller@1

      - task: DotNetCoreCLI@2
        displayName: 'dotnet restore'
        inputs:
          command: 'restore'
          projects: '$(solution)'
          feedsToUse: 'select'
          workingDirectory: '$(Build.Repository.LocalPath)'
          
      - task: DotNetCoreCLI@2
        displayName: 'dotnet build - $(buildConfiguration)'
        inputs:
          command: 'build'
          projects: '$(solution)'
          arguments: '--no-restore --configuration $(buildConfiguration) /p:Platform="$(buildPlatform)" /p:SkipInvalidConfigurations=true"'

      - task: DotNetCoreCLI@2
        displayName: 'dotnet test - Unit'
        inputs:
          command: 'test'
          projects: '**/Harri.SchoolDemoAPI.Tests.Unit.csproj'
          testRunTitle: 'Run Unit Tests'

      - task: DotNetCoreCLI@2
        displayName: 'dotnet test - Consumer Contract Tests'
        inputs:
          command: 'test'
          projects: '**/Harri.SchoolDemoAPI.Tests.Contract.Consumer.csproj'
          testRunTitle: 'Run Contract Tests - Consumer'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish pact file'
        inputs:
          PathtoPublish: '$(System.DefaultWorkingDirectory)/src/Tests/Contract/pacts/SchoolDempApi.Client-SchoolDemoApi.json'
          ArtifactName: 'pact'
          publishLocation: 'Container'
    
      - task: DotNetCoreCLI@2
        displayName: 'dotnet test - Provider Contract Tests'
        inputs:
          command: 'test'
          projects: '**/Harri.SchoolDemoAPI.Tests.Contract.Provider.csproj'
          testRunTitle: 'Run Contract Tests - Provider'
      
      - task: DotNetCoreCLI@2
        displayName: 'dotnet publish - $(buildConfiguration)'
        inputs:
          command: 'publish'
          publishWebProjects: true
          arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/Build/$(buildConfiguration)'
          
      - publish: '$(Build.ArtifactStagingDirectory)/Build'
        artifact: build
      #harri-schooldemoapi
      - task: Docker@2
        inputs:
          command: 'build'
          repository: 'harrisonslater/harri-schooldemoapi'
          Dockerfile: '**/Dockerfile'
          buildContext: '$(System.DefaultWorkingDirectory)'
          tags: '$(Build.SourceBranchName)-$(Build.BuildNumber)'

      - script: 'mkdir $(Build.ArtifactStagingDirectory)/Docker'
      - script: 'docker save harrisonslater/harri-schooldemoapi:$(Build.SourceBranchName)-$(Build.BuildNumber) -o $(Build.ArtifactStagingDirectory)/Docker/harri-schooldemoapi:$(Build.SourceBranchName)-$(Build.BuildNumber).tar'

      - script: 'ls $(Build.ArtifactStagingDirectory)/Docker'

      - publish: '$(Build.ArtifactStagingDirectory)/Docker'
        artifact: dockerBuild
#      - task: Docker@2
#        inputs:
#          containerRegistry: 'Docker Hub'
#          repository: 'harrisonslater/harri-schooldemoapi'
#          command: 'buildAndPush'
#          Dockerfile: '**/Dockerfile'
#          buildContext: '$(System.DefaultWorkingDirectory)'
#          tags: '$(Build.SourceBranchName)-$(Build.BuildNumber)'

- stage: 'DeployAndTest'
  jobs: 
    - job: 'DeployAndTest'
      displayName: 'Deploy (in-agent) and run integration tests'
      steps:

      - task: DownloadBuildArtifacts@1
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'build'
          downloadPath: '$(System.DefaultWorkingDirectory)'
          cleanDestinationFolder: false

#      - script: 'ls $(System.DefaultWorkingDirectory)'
#      - script: 'ls $(Build.Repository.LocalPath)/src/Tests/Harri.SchoolDemoAPI.Tests.Integration'

      - task: ExtractFiles@1
        inputs:
          archiveFilePatterns: '**/Harri.SchoolDemoAPI.zip'
          destinationFolder: '$(System.DefaultWorkingDirectory)/Extract'
          cleanDestinationFolder: false
          overwriteExistingFiles: false

      - task: DockerInstaller@0
        inputs:
          dockerVersion: '17.09.0-ce'

      - script: 'docker pull harrisonslater/schooldemo_sqldatabase:latest'
        displayName: docker pull

      - script: 'docker run -e "ACCEPT_EULA=Y" -e "MSSQL_SA_PASSWORD=p@ssw0rd" -p 1433:1433 -d harrisonslater/schooldemo_sqldatabase'
        displayName: docker run - School Demo SQL DB Container
      
      - script: | 
          cd $(System.DefaultWorkingDirectory)/Extract/
          nohup dotnet ./Harri.SchoolDemoAPI.dll --urls=$(APIUrlToTest) &
          echo "##vso[task.setvariable variable=dotnetProcessId;]"$!
          cd $(System.DefaultWorkingDirectory)
        displayName: Run SchoolDemoAPI $(buildConfiguration) build
          
#      - script: 'curl -X GET -S -L $(APIUrlToTest)openapi'
#      - script: 'curl -X GET -S -L $(APIUrlToTest)students/123'

      - task: FileTransform@1
        displayName: appsettings.json transform
        inputs:
          folderPath: '$(Build.Repository.LocalPath)/src/Tests/Harri.SchoolDemoAPI.Tests.Integration'
          fileType: 'json'
          targetFiles: 'appsettings.json'
      
      - task: DotNetCoreCLI@2
        displayName: dotnet test - Integration
        inputs:
          command: 'test'
          projects: '**/Harri.SchoolDemoAPI.Tests.Integration.csproj'
          testRunTitle: 'Integration Tests'
      
      - script: 'kill $(dotnetProcessId)'